---
globs: src/**/*.tsx,src/**/*.tsx
alwaysApply: false
---
# React TypeScript Web Development Rules

## TypeScript Configuration
- Always use TypeScript for React projects
- Configure strict mode in tsconfig.json
- Use proper type definitions for all props and state
- Avoid using `any` type - prefer `unknown` or specific types
- Use interface for object shapes and type for unions/primitives

## Component Structure
- Use functional components with hooks instead of class components
- Keep components small and focused on a single responsibility
- Extract reusable logic into custom hooks with proper typing
- Use TypeScript for better type safety and developer experience
- Define proper prop interfaces for all components

## State Management
- Use React hooks (useState, useEffect, useContext) for local state
- Prefer Zustand or Redux Toolkit for global state management
- Avoid prop drilling by using context or state management libraries
- Keep state as close to where it's used as possible
- Use proper TypeScript generics for state types

## Form Handling
- Use react-hook-form with TypeScript for form management and validation
- Implement proper error handling and user feedback
- Use zod for schema validation with TypeScript integration
- Provide clear error messages to users
- Define proper form data types and validation schemas

## API Integration
- Use React Query (TanStack Query) for server state management
- Implement proper loading and error states
- Use optimistic updates where appropriate
- Handle API errors gracefully with user-friendly messages
- Define proper API response types and error types

## Performance
- Use React.memo for expensive components with proper prop types
- Implement proper dependency arrays in useEffect
- Use useCallback and useMemo for expensive calculations
- Lazy load components and routes when possible
- Use proper TypeScript generics for performance optimizations

## Accessibility
- Use semantic HTML elements
- Provide proper ARIA labels and roles
- Ensure keyboard navigation works correctly
- Test with screen readers
- Use proper TypeScript types for accessibility props

## Styling
- Use Tailwind CSS for utility-first styling
- Keep styles consistent across components
- Use CSS modules or styled-components for component-specific styles
- Follow a consistent design system
- Use proper TypeScript types for styled-components

## Code Organization
- If the project uses TanStack Router and React, organize your code into `routes` and `shared` folders.
- The `shared` folder contains all common code such as basic components, utilities, types, services, stores, and hooks that are reused across the project.
- The `routes` folder contains route definitions and components, with each subfolder representing a route or nested route as defined by TanStack Router.
- Group related components in feature folders
- Use index files for clean imports
- Separate business logic from UI components
- Keep services and hooks in dedicated folders
- Use proper TypeScript barrel exports
- When you create new file use khebab-case for naming

## Error Handling
- Implement error boundaries for component error handling
- Use try-catch blocks for async operations
- Provide fallback UI for error states
- Log errors appropriately for debugging
- Define proper error types and interfaces

## Testing
- Write unit tests for components and hooks with TypeScript
- Use React Testing Library for component testing
- Test user interactions and accessibility
- Mock external dependencies appropriately
- Use proper TypeScript types in test files

## Security
- Validate and sanitize user inputs
- Use HTTPS for all API calls
- Implement proper authentication and authorization
- Avoid exposing sensitive information in client-side code
- Use proper TypeScript types for security-related data

## Best Practices
- Follow the single responsibility principle
- Use meaningful variable and function names
- Add proper JSDoc comments for complex functions
- Keep components pure and predictable
- Use proper TypeScript types and interfaces
- Avoid type assertions - prefer type guards
- Use discriminated unions for complex state management
- Implement proper generic constraints where needed

